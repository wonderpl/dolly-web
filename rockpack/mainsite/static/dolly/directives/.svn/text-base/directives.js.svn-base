(function(w,d,ng,ns,m) {

    'use strict';

    var app = ng.module(ns + '.' + m /* module name */,
                       [ns + '.services'] /* module dependencies */);

    app.directive('amgBackground', ['$timeout', '$compile', function($timeout, $compile) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {

                scope.$watch(function() {
                    return elem.attr('amg-background');
                }, function(nV) {
                    elem[0].style.backgroundImage = 'url(' + loading + ')';
                    elem.removeClass('loaded');
                    scope.$broadcast('destroy_video');
                    loadImageOrVideo(nV);
                });

                var loading = 'assets/img/loader.gif';

                function loadImageOrVideo(url) {
                    if ( elem.attr('data-type') === 'video' ) {
                        var tmpl = $compile('<amg-video-element></amg-video-element>')(ng.extend(scope.$new(), attrs));
                        elem.append(tmpl);

                        var decouple = scope.$on('route_change', function(ev, route, params) {
                            console.log('route_change', route, params);
                            if (route !== 'vehicles/model' || !params.section) {
                                scope.$broadcast('destroy_video');
                                decouple();
                            }
                        });

                    } else {
                        var image = new Image();
                        image.onload = function() {
                            elem[0].style.backgroundImage = 'url(' + url + ')';
                            elem.addClass('loaded');
                        };
                        image.onerror = function(err) {
                            console.log(err);
                            console.log(elem.parent());
                        };

                        image.src = url;
                    }
                }

                loadImageOrVideo(attrs.amgBackground);


            }
        };
    }]);

    app.directive('amgGalleryFullscreen', ['$rootScope', '$timeout', function($rootScope, $timeout) {
        return {
            restrict: 'C',
            link: function(scope, elem, attrs) {
                
                var item;

                function getImage() {
                    if (!elem.parent()[0]) return;
                    item = elem.parent()[0].querySelector('.car-gallery-item').getAttribute('amg-background');
                    $rootScope.$broadcast('image_change', item);
                }

                $timeout(function() {
                    getImage();
                });

                scope.$on('route_change', function(ev) {
                    $timeout(function() {
                        getImage();
                    });
                });

                elem.bind('click', function(ev) {
                    $rootScope.$broadcast('enter_fullscreen');
                });
                
            }
        };
    }]);

    app.directive('amgFullscreenWrapper', ['$rootScope', '$timeout',  function($rootScope, $timeout) {
        return {
            restrict: 'C',
            link: function(scope, elem, attrs) {

                scope.$on('image_change', function(ev, img) {
                    elem[0].style.backgroundImage = 'url(' + img + ')';
                });

                scope.$on('enter_fullscreen', function(ev, val) {
                    elem.addClass('show');
                });

                elem.bind('click', function(ev) {
                    $rootScope.$broadcast('exit_fullscreen');
                    elem.removeClass('show');
                });
            }
        };
    }]);

    app.directive('amgSlice', ['$timeout', function($timeout) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                var result = d.createElement('div'),
                    numOfSlices, rect, slices, maskWidth;

                function getRandomInt (min, max) {
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                }

                scope.$watch('showInfo', function(nV) {
                    result.style.visibility = nV ? 'hidden' : 'visible';
                });

                $timeout(function() {
                    numOfSlices = attrs.amgSlice || 100;
                    rect = elem[0].children[0].getBoundingClientRect();
                    slices = [];

                    if (!rect.width) rect.width = rect.right - rect.left;
                    if (!rect.height) rect.height = rect.bottom - rect.top;

                    result.className = elem[0].className;
                    result.style.height = rect.height + 'px';

                    maskWidth = Math.ceil(rect.width / numOfSlices);

                    function cloneContents(el) {
                        var clone = d.createElement('div');
                        clone.innerHTML = elem[0].innerHTML;
                        clone.style.width = maskWidth + 'px';
                        clone.style.height = '100%';
                        clone.style.display = 'inline-block';
                        clone.style.position = 'relative';
                        clone.style.overflow = 'hidden';
                        // clone.style.borderLeft = '1px solid #fff';
                        return clone;
                    }

                    for (var i = 0; i < numOfSlices; i++) {
                        var e = cloneContents(elem);
                        //e.style.webkitTransition = 'all 0.1s linear';
                        var contents = e.children[0];
                        contents.style.minWidth = rect.width + 'px';
                        contents.style.position = 'relative';
                        contents.style.left = -(i * maskWidth) + 'px';
                        slices.push(e);
                        result.appendChild(e);
                    }

                    elem.parent().append(ng.element(result));
                    elem[0].style.visibility = 'hidden';//.remove();

                    scope.$on('audio_ended', function() {
                        for (var i = 0; i < slices.length; i++) {
                            slices[i].style.top = '0px';
                            slices[i].style.opacity = 1;
                            slices[i].style.webkitTransform = 'translate3d(0,0,0)';
                        }
                    });

                    scope.$on('audio_process', function(ev, arr) {
                        var mid = Math.floor(numOfSlices / 2.5);
                        for (var i = 0; i < slices.length; i++) {
                            var m = Math.abs(mid - i) + 4;
                            var val = arr[m];
                            //val = val + (i - mid);
                            var slice = slices[i];
                            var chance = getRandomInt(1, 100) < 50 ? -1 : 1;
                            //slice.style.top = -calc + 'px';
                            slice.style.opacity = 1 - (val / 400);
                            slice.style.webkitTransform = 'translate3d(0,0,0) scaleY(' + (1 + (val / (100 + (m * 8)))) + ')';//' skewX(' + -(val / 4) + 'deg)';
                            //slice.style.webkitTransform = 'skewY(' + val * 10 + 'deg)';
                        }
                    });

                    if (scope.showGallery) {
                        var decouple = scope.$watch('showGallery', function(nV) {
                            if (!nV) {
                                rect = elem[0].children[0].getBoundingClientRect();
                                if (!rect.width) rect.width = rect.right - rect.left;
                                if (!rect.height) rect.height = rect.bottom - rect.top;
                                maskWidth = Math.ceil(rect.width / numOfSlices);
                                result.style.height = rect.height + 'px';
                                for (var i = 0; i < slices.length; i++) {
                                    slices[i].style.width = maskWidth + 'px';
                                    var contents = slices[i].children[0];
                                    contents.style.minWidth = rect.width + 'px';
                                    contents.style.position = 'relative';
                                    contents.style.left = -(i * maskWidth) + 'px';
                                }
                                decouple();
                            }
                        });
                    }
                });
            }
        };
    }]);

    app.directive('amgEngineAudio', ['$rootScope', '$fifer', function($rootScope, $fifer) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                if (scope.audio) {
                    $fifer.loaded(function() {
                        elem.bind('click', function() {
                            if (scope.showInfo) {
                                scope.$apply(function() {
                                    scope.showInfo = !scope.showInfo;
                                });
                            }
                            $fifer.play(attrs.amgEngineAudio, false, function() {
                                $rootScope.$broadcast('audio_ended');
                            });
                        });
                    })
                    .onAudioProcess(function(arr) {
                        $rootScope.$broadcast('audio_process', arr);
                    })
                    .registerAudio(attrs.amgEngineAudio, attrs.amgEngineAudioPrefix + attrs.amgEngineAudio + '.mp3', false);

                    scope.$on('route_change', function() {
                        $fifer.stopAll(true);
                    });
                }
            }
        };
    }]);

    app.directive('amgGalleryItems', ['$timeout', function($timeout) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                
                var ww = (function() {
                    if (typeof w.innerWidth !== 'undefined') {
                        return function() {
                            return w.innerWidth;
                        };
                    } else {
                        var b = ('clientWidth' in d.documentElement) ? d.documentElement : d.body;
                        return function() {
                            return b.clientWidth;
                        };
                    }
                })();


                $timeout(function() {
                    var item = scope.galleryItem - 1,
                        length = scope.data.vehicles[scope.currentParams.name].images.gallery.length;

                    var rect = { width : 136 };
                    var total = (rect.width + 2) * length;

                    var width = ww();
                    if (total < width) return;

                    ng.element(w).bind('resize', function() {
                        width = ww();
                        calculate();
                    });

                    scope.$watch('galleryItem', function(nV) {
                        item = scope.galleryItem;
                        calculate();
                    });

                    function calculate() {
                        var val = Math.floor((width / 2) / (rect.width + 2));

                        if (item > val) {
                            var max = -(total - width);
                            var calc = -((item - val) * (rect.width + 2));
                            calc = calc < max ? max : calc;
                            elem[0].style.marginLeft = calc + 'px';
                        } else {
                            elem[0].style.marginLeft = '0px';
                        }
                    }

                    calculate();

                    
                });
                
            }
        };
    }]);

    app.directive('amgVideoElement', ['$rootScope', '$videoplayer', '$timeout', function($rootScope, $videoplayer, $timeout){
        return {
            restrict: 'E',
            link: function(scope, elem, attrs) {

                var id;

                var decouple = scope.$on('destroy_video', function(ev) {
                    $videoplayer('video-' + id).dispose();
                    elem.remove();
                    decouple();
                });

                $timeout(function() {

                    var v = ng.element(d.createElement('video')),
                    wrap = ng.element(d.createElement('div'));

                    var src = scope.url;
                    var spl = src.split('/');
                    
                    id = spl[spl.length - 1];

                    wrap.attr('class', 'video-js vjs-default-skin');
                    v.attr('id', 'video-' + id);

                    v[0].src = src + '.mp4';
                    v.append('<source src="' + src + '.mp4" type="video/mp4" />');
                    v.append('<source src="' + src + '.webm" type="video/webm" />');
                    v.append('<source src="' + src + '.ogv" type="video/ogg" />');

                    wrap.append(v);
                    elem.append(wrap);

                    var vid = $videoplayer( 'video-' + id, { controls: true, autoplay: false, visible: true, preload: false, loop: false, width: '100%', height: '100%' } ).ready(function(){
                        this.on('paused', function(event){});
                        this.on('ended', function(event){});
                    });

                });
            }
        };
    }]);


})(window,document,window.angular,'amg','directives');